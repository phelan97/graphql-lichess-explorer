
type Query {
  gameDetails(id: ID!): GameDetails!,
  user(username: String!): User!,
  # Doesn't seem to be supported by the lichess API, even though it's documented.
  # It might be possible to create an ad-hoc lookup (or check against a db if it's local)
  # game(id: ID!): Game!,
  # This query downloads and parses a large file every time. It takes awhile to run!
  games(username: String!, limit: Int!): [Game!]!
}

type User {
  id: String!,
  username: String!,
  online: Boolean!,
  profile: Profile!,
  title: String!,
  url: String!,
  count: GameCount!
}

type Profile {
  bio: String!,
  fideRating: Int!
}

type GameCount {
  all: Int!,
  rated: Int!,
  ai: Int!,
  draw: Int!,
  drawH: Int!,
  loss: Int!,
  lossH: Int!,
  win: Int!,
  winH: Int!,
  bookmark: Int!,
  playing: Int!,
  import: Int!,
  me: Int!
}

type Game {
  id: ID!,
  url: String!,
  detailsUrl: String!
  pgn: String!
}

type GameDetails {
  id: ID!,
  rated: Boolean!,
  variant: String!,
  speed: String!,
  perf: String!,
  createdAt: Int!,
  lastMoveAt: Int!,
  turns: Int!,
  # turn into a Color enum
  color: String!,
  # could be an enum but I don't know the values
  status: String!,
  clock: Clock!,
  players: GamePlayers!,
  # turn winner into a Color enum
  winner: String!,
  url: String!
}

type Clock {
  initial: Int!,
  increment: Int!,
  totalTime: Int!
}

type GamePlayers {
  white: PlayerInfo!,
  black: PlayerInfo!
}

type PlayerInfo {
  userId: String!,
  rating: Int!,
  ratingDiff: Int!
}

# enum Color {
#   BLACK, WHITE
# }