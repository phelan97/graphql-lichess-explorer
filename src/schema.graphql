
type Query {
  game(gameId: ID!): Game!,
  user(id: String!): User!
}

# type Mutation {

# }

type Game {
  id: ID!,
  rated: Boolean!,
  variant: String!,
  speed: String!,
  # no idea what this field is
  perf: String!,
  createdAt: Int!,
  lastMoveAt: Int!,
  turns: Int!,
  # turn into a Color enum
  color: String!,
  # could be an enum but I don't know the values
  status: String!,
  clock: Clock!,
  players: GamePlayers!,
  # turn winner into a Color enum
  winner: String!,
  url: String!
}

type Clock {
  initial: Int!,
  increment: Int!,
  totalTime: Int!
}

type GamePlayers {
  white: PlayerInfo!,
  black: PlayerInfo!
}

type PlayerInfo {
  userId: String!,
  rating: Int!,
  # rating change from that game
  ratingDiff: Int!
}

# enum Color {
#   BLACK, WHITE
# }